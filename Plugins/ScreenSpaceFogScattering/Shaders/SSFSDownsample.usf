// Copyright 2023 Dmitry Karpukhin. All Rights Reserved.

#include "SSFSCommon.ush"

float2 InputSize;
Texture2D FogMaskTexture;
RWTexture2D<float4> Output;

float3 Downsample(Texture2D Texture, SamplerState Sampler, float2 UV, float2 PixelSize)
{
	const float2 Coords[13] = {
		float2(-1.0f,  1.0f), float2(1.0f,  1.0f),
		float2(-1.0f, -1.0f), float2(1.0f, -1.0f),
		float2(-2.0f, 2.0f), float2(0.0f, 2.0f), float2(2.0f, 2.0f),
		float2(-2.0f, 0.0f), float2(0.0f, 0.0f), float2(2.0f, 0.0f),
		float2(-2.0f,-2.0f), float2(0.0f,-2.0f), float2(2.0f,-2.0f)
	};


	const float Weights[13] = {
		// 4 samples
		// (1 / 4) * 0.5f = 0.125f
		0.125f, 0.125f,
		0.125f, 0.125f,

		// 9 samples
		// (1 / 9) * 0.5f
		0.0555555f, 0.0555555f, 0.0555555f,
		0.0555555f, 0.0555555f, 0.0555555f,
		0.0555555f, 0.0555555f, 0.0555555f
	};

	float3 OutColor = float3( 0.0f, 0.0f ,0.0f );
	
	UNROLL
	for(int i = 0; i < 13; i++)
	{
		const float2 CurrentUV = UV + Coords[i] * PixelSize;
		OutColor += Weights[i] * Texture2DSample(Texture, Sampler, CurrentUV).rgb;
	}

	return OutColor;
}

[numthreads(GROUP_SIZE, GROUP_SIZE, 1)]
void DownsampleCS(uint2 DispatchThreadId : SV_DispatchThreadID)
{
	// Check that we are in scope
	if (any(DispatchThreadId >= ViewportRect.zw))
	{
		return;
	}

	const float2 UV = ((float2(View.ViewRectMin.xy) + (DispatchThreadId + 0.5)) * ViewportInvSize) * UVScale;
	const float2 InPixelSize = (1.0f / InputSize) * 0.5;
	
	float3 OutColor = Downsample(InputTexture, InputSampler, UV, InPixelSize);
	
	Output[View.ViewRectMin.xy + DispatchThreadId] = float4(OutColor, 1);
}



